// Generated by CoffeeScript 1.8.0
var Ball, Game, Rect, game,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Rect = (function() {
  function Rect(context, color, x, y, width, height) {
    this.context = context;
    this.color = color;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.draw = function() {
    this.context.fillStyle = this.color;
    return this.context.fillRect(this.x, this.y, this.width, this.height);
  };

  return Rect;

})();

Ball = (function() {
  function Ball(context, color, x, y, radius, vx, vy) {
    this.context = context;
    this.color = color;
    this.x = x;
    this.y = y;
    this.radius = radius;
    this.vx = vx;
    this.vy = vy;
    this.move = __bind(this.move, this);
  }

  Ball.prototype.draw = function() {
    this.context.beginPath();
    this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    this.context.stroke();
    this.context.fillStyle = this.color;
    return this.context.fill();
  };

  Ball.prototype.move = function(vx, vy, width, height) {
    var checkBorder, dv, dvx, dvy, getMin;
    checkBorder = function(x, vx, radius, border) {
      var dvx;
      dvx = Infinity;
      if ((x + radius + vx >= border) && (vx > 0)) {
        dvx = border - x - radius;
      }
      if ((x - radius + vx <= 0) && (vx < 0)) {
        dvx = x - radius;
      }
      return dvx;
    };
    getMin = function(x, y) {
      var min;
      min = y;
      if (x < y) {
        min = x;
      }
      return min;
    };
    dvx = checkBorder(this.x, vx, this.radius, width);
    dvy = checkBorder(this.y, vy, this.radius, height);
    dv = Math.abs(getMin(dvx / vx, dvy / vy));
    console.log(this.x, this.y, vx, vy, width, height, dv, dvx, dvy);
    if (dv === Infinity) {
      this.x = this.x + vx;
      this.y = this.y + vy;
    } else {
      this.x += vx * dv;
      this.y += vy * dv;
    }
    if (Math.abs(dvx / vx) <= 1) {
      this.vx = -this.vx;
    }
    if (Math.abs(dvy / vy) <= 1) {
      return this.vy = -this.vy;
    }
  };

  return Ball;

})();

Game = (function() {
  function Game() {}

  Game.prototype.init = function() {
    this.canvas = document.getElementById("ballpool");
    this.canvas.width = 800;
    this.canvas.height = 600;
    this.context = this.canvas.getContext("2d");
    this.gameField = new Rect(this.context, "#AAAAAA", 0, 0, 800, 600);
    return this.gameField.draw();
  };

  Game.prototype.createBallButton = function() {
    var getClickPosition;
    getClickPosition = (function(_this) {
      return function(e) {
        var xPosition, yPosition;
        xPosition = e.clientX;
        yPosition = e.clientY;
        console.log(xPosition, yPosition);
        return _this.simpleBall = new Ball(_this.context, "red", xPosition, yPosition, 10, 2, 2);
      };
    })(this);
    return this.canvas.addEventListener("onclick", getClickPosition(game.gameField), false);
  };

  Game.prototype.draw = function() {
    this.gameField.draw();
    return this.simpleBall.draw();
  };

  Game.prototype.update = function() {
    this.context.clearRect(0, 0, 800, 600);
    this.updatePosition();
    return this.draw();
  };

  Game.prototype.animate = function() {
    var animation;
    animation = function(obj) {
      obj.update();
      return setTimeout((function() {
        return animation(obj);
      }), 10);
    };
    return animation(this);
  };

  Game.prototype.updatePosition = function() {
    var height, width;
    width = game.gameField.width;
    height = game.gameField.height;
    return this.simpleBall.move(this.simpleBall.vx, this.simpleBall.vy, width, height);
  };

  return Game;

})();

game = new Game();

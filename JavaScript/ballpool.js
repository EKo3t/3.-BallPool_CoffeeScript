// Generated by CoffeeScript 1.8.0
var Ball, Game, Rect, game;

Rect = (function() {
  function Rect(context, color, x, y, width, height) {
    this.context = context;
    this.color = color;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

  Rect.prototype.draw = function() {
    this.context.fillStyle = this.color;
    return this.context.fillRect(this.x, this.y, this.width, this.height);
  };

  return Rect;

})();

Ball = (function() {
  function Ball(context, color, x, y, radius, vx, vy) {
    this.context = context;
    this.color = color;
    this.x = x;
    this.y = y;
    this.radius = radius;
    this.vx = vx;
    this.vy = vy;
  }

  Ball.prototype.draw = function() {
    this.context.beginPath();
    this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    this.context.stroke();
    this.context.fillStyle = this.color;
    return this.context.fill();
  };

  Ball.prototype.checkBorder = function(x, vx, border) {
    var dvx;
    dvx = vx;
    if (Math.abs(border - x) < vx) {
      dvx = Math.abs(border - x);
    }
  };

  Ball.prototype.getMin = function(x, y) {
    var min;
    if (x < y) {
      min = x;
    } else {
      min = y;
    }
  };

  Ball.prototype.move = function(vx, vy, width, height) {
    var dv, dvx, dvy;
    this.vx = vx;
    this.vy = vy;
    if ((this.vx === 0) && (this.vy === 0)) {
      return;
    }
    dvx = checkBorder(this.x, this.vx, width);
    dvy = checkBorder(this.y, this.vy, height);
    dv = getMin(dvx, dvy);
    this.x += this.vx * dv;
    this.y += this.vy * dv;
    console.log(this.x, this.y);
    if (dvx < dvy) {
      this.vx = -this.vx;
    }
    if (dvy < dvx) {
      return this.vy = -this.vy;
    }
  };

  return Ball;

})();

Game = (function() {
  function Game() {}

  Game.prototype.init = function() {
    var canvas;
    canvas = document.getElementById("ballpool");
    canvas.width = 800;
    canvas.height = 600;
    this.context = canvas.getContext("2d");
    this.simpleBall = new Ball(this.context, "#FF0000", 500, 500, 10, 10, 10);
    return this.gameField = new Rect(this.context, "#AAAAAA", 0, 0, 800, 600);
  };

  Game.prototype.draw = function() {
    this.gameField.draw();
    return this.simpleBall.draw();
  };

  Game.prototype.update = function() {
    this.context.clearRect(0, 0, 800, 600);
    this.updatePosition();
    return this.draw();
  };

  Game.prototype.animate = function() {
    var animation;
    animation = function(obj) {
      obj.update();
      return setTimeout((function() {
        return animation(obj);
      }), 700);
    };
    return animation(this);
  };

  Game.prototype.updatePosition = function() {
    var height, width;
    width = game.gameField.width;
    height = game.gameField.height;
    return this.simpleBall.move(this.simpleBall.vx, this.simpleBall.vy, width, height);
  };

  return Game;

})();

game = new Game();
